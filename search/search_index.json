{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to the pyTRIS documentation. Purpose & Motivation \u00b6 This module exists to hopefully simplify access to Highways England's webTRIS data through the various endpoints provided . Installation \u00b6 pyTRIS is available through pip , and requires no other dependencies outside of the standard library to run. To install, simply use pip install pyTRIS Getting Started \u00b6 Visit the Getting Started section for information on basic usage. Troubleshooting \u00b6 Some possible errors encountered and their solutions are detailed in the Troubleshooting section. Contributing \u00b6 Contributions are encouraged, including improvements to the documentation. For more information, please visit the Contributing section. Thanks \u00b6 The structure of this module was completely revamped after lengthy discussions with (and code examples provided by) slowest walker in the world, all-round Python wizard and my former flatmate Jamie","title":"Home"},{"location":"#introduction","text":"Welcome to the pyTRIS documentation.","title":"Introduction"},{"location":"#purpose-motivation","text":"This module exists to hopefully simplify access to Highways England's webTRIS data through the various endpoints provided .","title":"Purpose &amp; Motivation"},{"location":"#installation","text":"pyTRIS is available through pip , and requires no other dependencies outside of the standard library to run. To install, simply use pip install pyTRIS","title":"Installation"},{"location":"#getting-started","text":"Visit the Getting Started section for information on basic usage.","title":"Getting Started"},{"location":"#troubleshooting","text":"Some possible errors encountered and their solutions are detailed in the Troubleshooting section.","title":"Troubleshooting"},{"location":"#contributing","text":"Contributions are encouraged, including improvements to the documentation. For more information, please visit the Contributing section.","title":"Contributing"},{"location":"#thanks","text":"The structure of this module was completely revamped after lengthy discussions with (and code examples provided by) slowest walker in the world, all-round Python wizard and my former flatmate Jamie","title":"Thanks"},{"location":"contributing/","text":"Coming soon","title":"Contributing"},{"location":"endpoints/","text":"Endpoints \u00b6 Coming soon","title":"Endpoints"},{"location":"endpoints/#endpoints","text":"Coming soon","title":"Endpoints"},{"location":"getting-started/","text":"Creating an API object \u00b6 The first step to accessing the data is to create an instance of the API object. The only parameter required is version - at the time of writing (July 2020), the only version of the webTRIS APIs that is available is 1.0. from pytris.api import API api = API ( version = '1.0' ) Accessing Endpoints \u00b6 Endpoints are accessed through methods from the API object relating to their corresponding resource. These are named in line with their descriptions from webTRIS, albeit with some modifications to match Python conventions. To access endpoints for Sites, for example, we can use: from pytris.api import API api = API ( version = '1.0' ) sites = api . sites () The methods that are available vary by the type of resource being accessed. Some resources are used to access objects ( Sites , Areas and SiteTypes ) while others are used to access data ( Reports and Quality ). Next we'll go on to briefly describe how to use the Sites and Reports endpoints, as these are likely to be the most used. Information on the other endpoints can be found in the Endpoints section. Sites \u00b6 The Sites endpoints let the user look up information for one or all of the count locations stored in webTRIS. Looking up one site \u00b6 Sometimes you may need to look up information for a single site - for example, when checking data that's been provided to you from some other source. To do this, we can use the .get() method for sites and pass through the ID of the site we want to find information about: from pytris.api import API api = API ( version = '1.0' ) sites = api . sites () result = sites . get ( 1 ) This will return a Site object - this is a data storage class containing the attributes relating to this site. The attributes are again named in line with the API documentation, so in this example we have: result.id gives the Site ID result.description provides the description result.longitude provides the longitude of the site location result.latitude provides the latitude of the site location result.status details the status of the site (e.g. Active , Inactive ) Looking up all sites \u00b6 You may also want to look up all of the webTRIS sites. There are, at time of writing (July 2020), over 18,000 sites in webTRIS so care should be taken when using this method. This may be useful, however, for mapping all sites and understanding which sites may be relevant for further analysis. The .all() method returns a generator of Site objects, so in most cases you'll need to iterate through them: from pytris.api import API api = API ( version = '1.0' ) sites = api . sites () for site in sites . all (): # Do something with each site Reports \u00b6 Coming soon","title":"Getting Started"},{"location":"getting-started/#creating-an-api-object","text":"The first step to accessing the data is to create an instance of the API object. The only parameter required is version - at the time of writing (July 2020), the only version of the webTRIS APIs that is available is 1.0. from pytris.api import API api = API ( version = '1.0' )","title":"Creating an API object"},{"location":"getting-started/#accessing-endpoints","text":"Endpoints are accessed through methods from the API object relating to their corresponding resource. These are named in line with their descriptions from webTRIS, albeit with some modifications to match Python conventions. To access endpoints for Sites, for example, we can use: from pytris.api import API api = API ( version = '1.0' ) sites = api . sites () The methods that are available vary by the type of resource being accessed. Some resources are used to access objects ( Sites , Areas and SiteTypes ) while others are used to access data ( Reports and Quality ). Next we'll go on to briefly describe how to use the Sites and Reports endpoints, as these are likely to be the most used. Information on the other endpoints can be found in the Endpoints section.","title":"Accessing Endpoints"},{"location":"getting-started/#sites","text":"The Sites endpoints let the user look up information for one or all of the count locations stored in webTRIS.","title":"Sites"},{"location":"getting-started/#looking-up-one-site","text":"Sometimes you may need to look up information for a single site - for example, when checking data that's been provided to you from some other source. To do this, we can use the .get() method for sites and pass through the ID of the site we want to find information about: from pytris.api import API api = API ( version = '1.0' ) sites = api . sites () result = sites . get ( 1 ) This will return a Site object - this is a data storage class containing the attributes relating to this site. The attributes are again named in line with the API documentation, so in this example we have: result.id gives the Site ID result.description provides the description result.longitude provides the longitude of the site location result.latitude provides the latitude of the site location result.status details the status of the site (e.g. Active , Inactive )","title":"Looking up one site"},{"location":"getting-started/#looking-up-all-sites","text":"You may also want to look up all of the webTRIS sites. There are, at time of writing (July 2020), over 18,000 sites in webTRIS so care should be taken when using this method. This may be useful, however, for mapping all sites and understanding which sites may be relevant for further analysis. The .all() method returns a generator of Site objects, so in most cases you'll need to iterate through them: from pytris.api import API api = API ( version = '1.0' ) sites = api . sites () for site in sites . all (): # Do something with each site","title":"Looking up all sites"},{"location":"getting-started/#reports","text":"Coming soon","title":"Reports"},{"location":"troubleshooting/","text":"Coming soon","title":"Troubleshooting"}]}